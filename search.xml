<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Hexo配置并分别部署到Gitpage和Nginx上的实践</title>
      <link href="/2019/09/23/Hexo%E9%85%8D%E7%BD%AE%E5%B9%B6%E5%88%86%E5%88%AB%E9%83%A8%E7%BD%B2%E5%88%B0Gitpage%E5%92%8CNginx%E4%B8%8A%E7%9A%84%E5%AE%9E%E8%B7%B5/"/>
      <url>/2019/09/23/Hexo%E9%85%8D%E7%BD%AE%E5%B9%B6%E5%88%86%E5%88%AB%E9%83%A8%E7%BD%B2%E5%88%B0Gitpage%E5%92%8CNginx%E4%B8%8A%E7%9A%84%E5%AE%9E%E8%B7%B5/</url>
      
        <content type="html"><![CDATA[<blockquote><center>摘要</center>本篇文章主要介绍了以下内容:<ul><li>Hexo的搭建和基本配置</li><li>如何将Hexo博客部署到gitpage上</li><li>如何将Hexo博客部署到第三方服务器（Nginx）上</li></ul></blockquote><hr><h2 id="1-Hexo简介"><a href="#1-Hexo简介" class="headerlink" title="1. Hexo简介"></a>1. Hexo简介</h2><p>Hexo是一个基于NodeJs的博客制作工具，本身是可以当做博客服务器来使用，但是为了更好的性能，一般会将Hexo产生的静态博客页面(HTML)部署到专业的服务器上使用。<br>所以Hexo更是一个<strong>静态页面生生成、部署工具</strong></p><h2 id="2-Hexo搭建"><a href="#2-Hexo搭建" class="headerlink" title="2. Hexo搭建"></a>2. Hexo搭建</h2><ol><li><p>Hexo 准备<br>Hexo底层基于NodeJS和Git, 所以请确保它们已经就位。如果没有，请参考: <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="noopener">Hexo官方文档</a></p></li><li><p>Hexo 安装</p><pre><code class="bash">$ npm install -g hexo-cli</code></pre></li><li><p>Hexo 创建</p><pre><code class="bash">$ hexo init &lt;folder&gt;  # folder是博客系统的名称$ cd &lt;folder&gt;$ npm install</code></pre></li><li><p>Hexo 目录结构</p><pre><code class="bash">├── _config.yml #除主题中的 _comfig.xml外，最常用的一个配置文件├── package.json #依赖包├── scaffolds    #模板文件├── source|   ├── _drafts|   └── _posts   #具体博客页面└── themes       #主题目录</code></pre></li><li><p>Hexo 创建博客页面</p><pre><code class="bash">$ hexo new post &lt;title&gt;  # title就是博客页的标题</code></pre></li><li><p>编辑Hexo博客页面<br>基于上一步中创建的博客页面，可以使用第三方markdown编辑工具继续编辑博客页面，直至完成页面内容。markdown语法如下所示:</p><pre><code class="markdown">&gt;## Hexo搭建&gt;&gt;1. Hexo 准备&gt;Hexo底层基于NodeJS和Git, 所以请确保它们已经就位。如果没有，请参考: [Hexo官方文档](https://hexo.io/zh-cn/docs/)&gt;&gt;2. Hexo 安装&gt;```bash&gt;$ npm install -g hexo-cli&gt;```</code></pre><p><a href="https://www.jianshu.com/p/191d1e21f7ed" target="_blank" rel="noopener">获取更多markdown语法</a></p></li><li><p>生成静态博客页面</p><pre><code class="bash">$ hexo clean$ hexo generate</code></pre><p>现在已经生成了一个piblic文件夹，文件夹包含着所有包装好的博客内容页面。而后面的部署操作的实际就是操作这个文件夹。</p></li></ol><h2 id="3-Hexo部署到GitPage"><a href="#3-Hexo部署到GitPage" class="headerlink" title="3. Hexo部署到GitPage"></a>3. Hexo部署到GitPage</h2><ol><li><p>GitPage是什么<br>Gitpage是由GitHub托管的项目空间，免费，免运维。所以成为很多人的项目空间首选。</p></li><li><p>GitHub 端的设置</p><ol><li><p>项目的名称一定跟github账户名一致，并且项目名称后面一定加上’.github.io’.</p><img src="/2019/09/23/Hexo配置并分别部署到Gitpage和Nginx上的实践/1.png" title="项目名称"></li><li><p>项目设置中，关于gitpage的设置：</p><img src="/2019/09/23/Hexo配置并分别部署到Gitpage和Nginx上的实践/2.png" title="项目名称"></li></ol></li><li><p>Hexo 中的配置:</p><pre><code>deploy:type: gitrepo: git@github.com:xxxxx/xxxxx.github.io.git branch: master</code></pre><p>其中 xxxxx 是你的github账户名称。</p></li></ol><p>4 hexo端 和 github 端都设置好之后，就可以把’hexo generate’ 生成的public文件夹，部署到 gitpage了，通过以下命令:</p><pre><code class="bash">$ hexo deploy</code></pre><p>注意:hexo3.0以上，需要配合安装以下插件，才能上传成功:</p><pre><code class="bash">$ npm install hexo-deployer-git --save</code></pre><p>上传成功以后,就能在github项目下，看到上传的内容。<br>并且，通过访问: <a href="https://xxxxx.github.io" target="_blank" rel="noopener">https://xxxxx.github.io</a> 就能够访问你的博客了！！<br>其中 xxxxx 是你的github账户名称。</p><img src="/2019/09/23/Hexo配置并分别部署到Gitpage和Nginx上的实践/3.png" title="项目名称"><h2 id="4-Hexo部署到Nginx"><a href="#4-Hexo部署到Nginx" class="headerlink" title="4. Hexo部署到Nginx"></a>4. Hexo部署到Nginx</h2><ol><li><p>Nginx简介<br>Nginx作为当今非常主流的web服务器，同时具有代理和反向代理等功能。用户覆盖率极高。今天我们就把Hero生成的博客静态HTML文件，部署到Nginx上。</p></li><li><p>Nginx安装配置不做介绍，自己去掌握。</p></li><li><p>部署的实质就是将’hexo generate’ 生成的public文件夹，作为一个nginx的server去运行。</p><ol><li><p>在Nginx中新增一个server,设置hexo的根目录为:’/opt/xxxxx/keepup/‘:</p><pre><code># server hexoserver {  listen       4000 ssl http2;  listen       [::]:4000 ssl http2;  server_name  www.whsasf.com localhost;charset UTF-8;  root        /opt/xxxxx/keepup/;  # It is *strongly* recommended to generate unique DH parameters  # Generate them with: openssl dhparam -out /etc/pki/nginx/dhparams.pem 2048  #ssl_dhparam &quot;/etc/pki/nginx/dhparams.pem&quot;;  ssl_certificate &quot;/etc/letsencrypt/live/whsasf.com/fullchain.pem&quot;;ssl_certificate_key &quot;/etc/letsencrypt/live/whsasf.com/privkey.pem&quot;;ssl_session_cache shared:SSL:1m;  ssl_session_timeout  10m;  ssl_protocols TLSv1 TLSv1.1 TLSv1.2;  ssl_ciphers HIGH:SEED:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!RSAPSK:!aDH:!aECDH:!EDH-DSS-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA:!SRP;  ssl_prefer_server_ciphers on;  # Load configuration files for the default server block.  include /etc/nginx/default.d/*.conf;  location /{  }# staticlocation /static/{  autoindex on;}# faviconlocation = /favicon.ico {  log_not_found off;  access_log off;}  error_page 404 /40x.html;      location = /40x.html {  root   /opt/xxxxx/gt_web/error_page;  }  error_page 500 502 503 504 /50x.html;      location = /50x.html {  root /opt/xxxxx/gt_web/error_page;  }}</code></pre></li><li><p>将public文件夹拷贝到nginx server指定的路径’/opt/xxxxx/keepup/‘。如果在远程机器中部署，可以使用scp等工具。</p></li><li><p>然后，重新启动Nginx服务, 就可以在浏览器中访问 hexo博客了!<br>示例中的访问地址应为: <a href="https://www.whsasf.com:4000" target="_blank" rel="noopener">https://www.whsasf.com:4000</a></p></li></ol></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> nginx </tag>
            
            <tag> gitpage </tag>
            
            <tag> github </tag>
            
            <tag> 建站 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
